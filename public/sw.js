/**
 * Service Worker for Advanced Caching Strategy and Offline Support
 * Í≥†Í∏â Ï∫êÏã± Ï†ÑÎûµ Î∞è Ïò§ÌîÑÎùºÏù∏ ÏßÄÏõêÏùÑ ÏúÑÌïú ÏÑúÎπÑÏä§ ÏõåÏª§
 */

const CACHE_VERSION = 'v2';
const STATIC_CACHE_NAME = `gaindeuk-static-${CACHE_VERSION}`;
const DYNAMIC_CACHE_NAME = `gaindeuk-dynamic-${CACHE_VERSION}`;
const API_CACHE_NAME = `gaindeuk-api-${CACHE_VERSION}`;
const IMAGE_CACHE_NAME = `gaindeuk-images-${CACHE_VERSION}`;

// Ï∫êÏãúÌï† Ï†ïÏ†Å Î¶¨ÏÜåÏä§
const STATIC_ASSETS = [
  '/',
  '/index.html',
  '/manifest.json',
  '/favicon.ico',
  '/vite.svg',
  '/logo192.png',
  '/logo512.png'
];

// Ï∫êÏãú Ï†ÑÎûµÎ≥Ñ API ÏóîÎìúÌè¨Ïù∏Ìä∏
const CACHE_STRATEGIES = {
  // Ï∫êÏãú Ïö∞ÏÑ† (Ï†ïÏ†Å Îç∞Ïù¥ÌÑ∞)
  CACHE_FIRST: [
    /\/api\/coins$/,
    /\/api\/user-profile/,
    /\/api\/settings/
  ],
  
  // ÎÑ§Ìä∏ÏõåÌÅ¨ Ïö∞ÏÑ† (Ïã§ÏãúÍ∞Ñ Îç∞Ïù¥ÌÑ∞)
  NETWORK_FIRST: [
    /\/api\/trading-signals/,
    /\/api\/market-data/,
    /\/api\/price-updates/
  ],
  
  // Ï∫êÏãúÎßå (Ïò§ÌîÑÎùºÏù∏ Ïö∞ÏÑ†)
  CACHE_ONLY: [
    /\/api\/static-content/,
    /\/api\/help/
  ],
  
  // ÎÑ§Ìä∏ÏõåÌÅ¨Îßå (Ï§ëÏöîÌïú Îç∞Ïù¥ÌÑ∞)
  NETWORK_ONLY: [
    /\/api\/auth/,
    /\/api\/transactions/
  ]
};

// Ï∫êÏãú ÎßåÎ£å ÏãúÍ∞Ñ (Î∞ÄÎ¶¨Ï¥à)
const CACHE_EXPIRY = {
  STATIC: 7 * 24 * 60 * 60 * 1000, // 7Ïùº
  DYNAMIC: 24 * 60 * 60 * 1000,    // 1Ïùº
  API: 5 * 60 * 1000,              // 5Î∂Ñ
  IMAGES: 30 * 24 * 60 * 60 * 1000 // 30Ïùº
};

// ÏÑ§Ïπò Ïù¥Î≤§Ìä∏
self.addEventListener('install', (event) => {
  console.log('üîß Service Worker installing...');
  
  event.waitUntil(
    caches.open(STATIC_CACHE_NAME)
      .then((cache) => {
        console.log('üì¶ Caching static assets...');
        return cache.addAll(STATIC_ASSETS);
      })
      .then(() => {
        console.log('‚úÖ Static assets cached successfully');
        return self.skipWaiting();
      })
      .catch((error) => {
        console.error('‚ùå Failed to cache static assets:', error);
      })
  );
});

// ÌôúÏÑ±Ìôî Ïù¥Î≤§Ìä∏
self.addEventListener('activate', (event) => {
  console.log('üöÄ Service Worker activating...');
  
  event.waitUntil(
    caches.keys()
      .then((cacheNames) => {
        return Promise.all(
          cacheNames.map((cacheName) => {
            if (cacheName !== STATIC_CACHE_NAME && cacheName !== DYNAMIC_CACHE_NAME) {
              console.log('üóëÔ∏è Deleting old cache:', cacheName);
              return caches.delete(cacheName);
            }
          })
        );
      })
      .then(() => {
        console.log('‚úÖ Service Worker activated');
        return self.clients.claim();
      })
  );
});

// fetch Ïù¥Î≤§Ìä∏
self.addEventListener('fetch', (event) => {
  const { request } = event;
  const url = new URL(request.url);

  // GET ÏöîÏ≤≠Îßå Ï≤òÎ¶¨
  if (request.method !== 'GET') {
    return;
  }

  // Ï†ïÏ†Å Î¶¨ÏÜåÏä§ Ï≤òÎ¶¨ (Ï∫êÏãú Ïö∞ÏÑ†)
  if (STATIC_ASSETS.includes(url.pathname)) {
    event.respondWith(cacheFirst(request, STATIC_CACHE_NAME));
    return;
  }

  // API ÏöîÏ≤≠ Ï≤òÎ¶¨ (Ï†ÑÎûµÎ≥Ñ)
  const apiStrategy = getCacheStrategy(url.pathname);
  if (apiStrategy) {
    event.respondWith(handleApiRequest(request, apiStrategy));
    return;
  }

  // Ïù¥ÎØ∏ÏßÄ Î¶¨ÏÜåÏä§ Ï≤òÎ¶¨ (Ï∫êÏãú Ïö∞ÏÑ†)
  if (request.destination === 'image') {
    event.respondWith(cacheFirst(request, IMAGE_CACHE_NAME));
    return;
  }

  // Í∏∞ÌÉÄ ÏöîÏ≤≠ÏùÄ ÎÑ§Ìä∏ÏõåÌÅ¨ÏóêÏÑú Í∞ÄÏ†∏Ïò§Í∏∞
  event.respondWith(fetch(request));
});

// Ï∫êÏãú Ï†ÑÎûµ Í≤∞Ï†ï
function getCacheStrategy(pathname) {
  for (const [strategy, patterns] of Object.entries(CACHE_STRATEGIES)) {
    if (patterns.some(pattern => pattern.test(pathname))) {
      return strategy;
    }
  }
  return null;
}

// API ÏöîÏ≤≠ Ï≤òÎ¶¨
async function handleApiRequest(request, strategy) {
  const url = new URL(request.url);
  
  switch (strategy) {
    case 'CACHE_FIRST':
      return cacheFirst(request, API_CACHE_NAME);
    
    case 'NETWORK_FIRST':
      return networkFirst(request, API_CACHE_NAME);
    
    case 'CACHE_ONLY':
      return cacheOnly(request);
    
    case 'NETWORK_ONLY':
      return networkOnly(request);
    
    default:
      return fetch(request);
  }
}

// Ï∫êÏãú Ïö∞ÏÑ† Ï†ÑÎûµ
async function cacheFirst(request, cacheName) {
  try {
    const cachedResponse = await caches.match(request);
    if (cachedResponse && !isExpired(cachedResponse)) {
      console.log('üì¶ Serving from cache:', request.url);
      return cachedResponse;
    }
    
    const networkResponse = await fetch(request);
    if (networkResponse.status === 200) {
      const responseClone = networkResponse.clone();
      const cache = await caches.open(cacheName);
      await cache.put(request, responseClone);
      console.log('üíæ Cached:', request.url);
    }
    return networkResponse;
  } catch (error) {
    console.error('‚ùå Cache first failed:', error);
    const cachedResponse = await caches.match(request);
    return cachedResponse || new Response('Offline', { status: 503 });
  }
}

// ÎÑ§Ìä∏ÏõåÌÅ¨ Ïö∞ÏÑ† Ï†ÑÎûµ
async function networkFirst(request, cacheName) {
  try {
    const networkResponse = await fetch(request);
    if (networkResponse.status === 200) {
      const responseClone = networkResponse.clone();
      const cache = await caches.open(cacheName);
      await cache.put(request, responseClone);
      console.log('üåê Network first - cached:', request.url);
    }
    return networkResponse;
  } catch (error) {
    console.log('üì¶ Network failed, serving from cache:', request.url);
    const cachedResponse = await caches.match(request);
    return cachedResponse || new Response('Offline', { status: 503 });
  }
}

// Ï∫êÏãúÎßå Ï†ÑÎûµ
async function cacheOnly(request) {
  const cachedResponse = await caches.match(request);
  if (cachedResponse && !isExpired(cachedResponse)) {
    console.log('üì¶ Cache only - serving:', request.url);
    return cachedResponse;
  }
  return new Response('Not cached', { status: 404 });
}

// ÎÑ§Ìä∏ÏõåÌÅ¨Îßå Ï†ÑÎûµ
async function networkOnly(request) {
  try {
    const networkResponse = await fetch(request);
    console.log('üåê Network only:', request.url);
    return networkResponse;
  } catch (error) {
    console.error('‚ùå Network only failed:', error);
    return new Response('Network error', { status: 503 });
  }
}

// Ï∫êÏãú ÎßåÎ£å ÌôïÏù∏
function isExpired(response) {
  const cacheDate = response.headers.get('sw-cache-date');
  if (!cacheDate) return false;
  
  const cacheTime = new Date(cacheDate).getTime();
  const now = Date.now();
  const maxAge = CACHE_EXPIRY.API; // Í∏∞Î≥∏ 5Î∂Ñ
  
  return (now - cacheTime) > maxAge;
}

// Î∞±Í∑∏ÎùºÏö¥Îìú ÎèôÍ∏∞Ìôî
self.addEventListener('sync', (event) => {
  console.log('üîÑ Background sync triggered:', event.tag);
  
  if (event.tag === 'background-sync') {
    event.waitUntil(
      // Î∞±Í∑∏ÎùºÏö¥ÎìúÏóêÏÑú ÏàòÌñâÌï† ÏûëÏóÖ
      performBackgroundSync()
    );
  }
});

// Î∞±Í∑∏ÎùºÏö¥Îìú ÎèôÍ∏∞Ìôî ÏûëÏóÖ
async function performBackgroundSync() {
  try {
    console.log('üîÑ Performing background sync...');
    
    // Ïò§ÌîÑÎùºÏù∏ ÏÉÅÌÉúÏóêÏÑú Ï†ÄÏû•Îêú Îç∞Ïù¥ÌÑ∞ ÎèôÍ∏∞Ìôî
    const cache = await caches.open(DYNAMIC_CACHE_NAME);
    const requests = await cache.keys();
    
    for (const request of requests) {
      try {
        const response = await fetch(request);
        if (response.status === 200) {
          await cache.put(request, response);
          console.log('‚úÖ Synced:', request.url);
        }
      } catch (error) {
        console.error('‚ùå Failed to sync:', request.url, error);
      }
    }
    
    console.log('‚úÖ Background sync completed');
  } catch (error) {
    console.error('‚ùå Background sync failed:', error);
  }
}

// Ìë∏Ïãú ÏïåÎ¶º Ï≤òÎ¶¨
self.addEventListener('push', (event) => {
  console.log('üì± Push notification received');
  
  if (event.data) {
    const data = event.data.json();
    const options = {
      body: data.body,
      icon: '/vite.svg',
      badge: '/vite.svg',
      tag: data.tag || 'default',
      data: data.data
    };
    
    event.waitUntil(
      self.registration.showNotification(data.title, options)
    );
  }
});

// ÏïåÎ¶º ÌÅ¥Î¶≠ Ï≤òÎ¶¨
self.addEventListener('notificationclick', (event) => {
  console.log('üì± Notification clicked');
  
  event.notification.close();
  
  event.waitUntil(
    clients.openWindow('/')
  );
});

// Î©îÏãúÏßÄ Ï≤òÎ¶¨
self.addEventListener('message', (event) => {
  console.log('üì® Message received:', event.data);
  
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }
  
  if (event.data && event.data.type === 'GET_CACHE_SIZE') {
    getCacheSize().then((size) => {
      event.ports[0].postMessage({ type: 'CACHE_SIZE', size });
    });
  }
});

// Ï∫êÏãú ÌÅ¨Í∏∞ Í≥ÑÏÇ∞
async function getCacheSize() {
  try {
    const cacheNames = await caches.keys();
    let totalSize = 0;
    
    for (const cacheName of cacheNames) {
      const cache = await caches.open(cacheName);
      const requests = await cache.keys();
      
      for (const request of requests) {
        const response = await cache.match(request);
        if (response) {
          const blob = await response.blob();
          totalSize += blob.size;
        }
      }
    }
    
    return totalSize;
  } catch (error) {
    console.error('‚ùå Failed to calculate cache size:', error);
    return 0;
  }
}
